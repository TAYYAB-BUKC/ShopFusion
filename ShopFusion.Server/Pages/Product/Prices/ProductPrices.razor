@page "/product/price/{Id:int}"

@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository

<h3 class="text-primary">Manage Product Prices</h3>

@if (IsLoading)
{
    <div class="text-center">
        <img src="images/loading.gif" />
    </div>
}
else
{
    <div class="row border p-2 mb-4">

        <div class="col-md-10">
            <div class="card-body">
                <h4 class="card-title mb-3 ml-3">@product.Name</h4>
                <span>
                    Category: @product.Category.Name
                </span>
                <br />
                <span>
                    Description: @((MarkupString)product.Description)
                </span>
                <br />
            </div>

        </div>
        <div class="col-md-2">
            <div class="text-center">
                <img src="@product.ImageURL" class="w-100" />
            </div>
        </div>

        <div class="col-md-12">
            <RadzenDataGrid @ref="pricesGrid" TItem="ProductPricesDTO" Data="@productPrices" AllowPaging="true">
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New" Click="@InsertRow" />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(ProductPricesDTO.Id)" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Property="@nameof(ProductPricesDTO.Size)" Title="Size" Frozen="true">
                        <EditTemplate>
                            <RadzenDropDown Name="size" @bind-Value="((context as ProductPricesDTO).Size)" Data="@productSizes" Style="width:100%; display: block;" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select Size" }})" />
                            <RadzenRequiredValidator Text="Size is required" Component="size" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(ProductPricesDTO.Price)" Title="Price">
                        <EditTemplate>
                            <RadzenNumeric Name="price" @bind-Value="((context as ProductPricesDTO).Price)" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select freight" }})" />
                            <RadzenRequiredValidator Text="Price is required" Component="price" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="productPricesDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="productPricesDTO">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => PrepareRowForEdit(productPricesDTO))" @onclick:stopPropagation="true"></RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeletePrice(productPricesDTO))" @onclick:stopPropagation="true"></RadzenButton>
                        </Template>
                        <EditTemplate Context="productPricesDTO">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" aria-label="Save" Click="@(() => SaveRow(productPricesDTO))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" aria-label="Cancel" Click="@(() => CancelEdit(productPricesDTO))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private RadzenDataGrid<ProductPricesDTO> pricesGrid;
    public ProductDTO product = new();
    public IList<ProductPricesDTO> productPrices = new List<ProductPricesDTO>();
    private bool IsLoading { get; set; } = true;
    public IEnumerable<string> productSizes = new List<string>()
    {
        "Small", "Medium", "Large", "8oz", "16oz", "24oz", "32oz"
    };

    ProductPricesDTO productPricesDTO = new ProductPricesDTO();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductInformation();
        }
    }

    private async Task LoadProductInformation()
    {
        IsLoading = true;
        StateHasChanged();
        product = await _productRepository.GetById(Id);
        productPrices = await _productPriceRepository.GetAll(Id);
        IsLoading = false;
        StateHasChanged();
    }

    async Task InsertRow()
    {
        if (!pricesGrid.IsValid) return;

        var productPrice = new ProductPricesDTO();
        productPricesDTO = productPrice;
        await pricesGrid.InsertRow(productPrice);
    }

    private void CancelEdit(ProductPricesDTO productPrice)
    {
        Reset(productPrice);

        pricesGrid.CancelEditRow(productPrice);
    }

    private void Reset(ProductPricesDTO productPrice)
    {
        productPricesDTO = new ProductPricesDTO();
    }

    private async Task SaveRow(ProductPricesDTO productPrice)
    {
        await pricesGrid.UpdateRow(productPrice);
        productPrice.ProductId = Id;

        if(productPrice.Id > 0){
            await _productPriceRepository.Update(productPrice);
        }
        else{
            await _productPriceRepository.Create(productPricesDTO);
        }        
        productPrices = await _productPriceRepository.GetAll(Id);
        pricesGrid.Data = productPrices;
    }

    private async Task PrepareRowForEdit(ProductPricesDTO productPrice)
    {
        if (!pricesGrid.IsValid) return;
        productPricesDTO = productPrice;
        await pricesGrid.EditRow(productPrice);
    }

    private async Task UpdateProduct(ProductPricesDTO productPrice)
    {
        Reset(productPrice);
        await _productPriceRepository.Update(productPrice);
    }

    private async Task DeletePrice(ProductPricesDTO productPrice)
    {
        Reset(productPrice);
        await _productPriceRepository.Delete(productPrice.Id);
        //StateHasChanged();
        productPrices = await _productPriceRepository.GetAll(Id);
        pricesGrid.Data = productPrices;
        //pricesGrid.Reload();
    }
}