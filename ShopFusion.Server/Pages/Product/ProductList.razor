@page "/product"
@* @attribute [Authorize] *@

@inject IProductRepository _productRepository
@inject IFileUploader _fileUploader
@inject IJSRuntime _JSRuntime
@inject NavigationManager _navigationManager

<div class="row mt-4">
    <div class="col-4">
        <h4 class="card-title text-primary">Products List</h4>
    </div>
    <div class="col-5 offset-2">
        <a href="/product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
    <div class="col-12">
        @if (Products.Count() > 0)
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="text-center">Name</th>
                        <th class="text-center">Shop Favorite</th>
                        <th class="text-center">Customer Favorite</th>
                        <th class="text-center">Category</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Products)
                    {
                        <tr>
                            <td class="text-center">@product.Name</td>
                            <td class="text-center"><input type="checkbox" disabled name="isShopFavorite" @bind="@product.IsShopFavorite" /></td>
                            <td class="text-center"><input type="checkbox" disabled name="isCustomerFavorite" @bind="@product.IsCustomerFavorite" /></td>
                            <td class="text-center">@product.Category.Name</td>
                            <td class="text-center">
                                <NavLink class="btn btn-primary" href="@($"/product/edit/{product.Id}")">Edit</NavLink>
                                <NavLink class="btn btn-success" href="@($"/product/price/{product.Id}")">Price</NavLink>
                                <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(product.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            @if (IsLoading)
            {
                <div class="text-center">
                    <img src="images/loading.gif" />
                </div>
            }
            else
            {
                <div>
                    <p>No records found.</p>
                </div>
            }
        }
    </div>
</div>

<_DeleteConfirmation IsProcessingInProgress="IsLoading" DeleteCallback="Delete"></_DeleteConfirmation>

@code {
    private List<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private bool IsLoading { get; set; }
    private int DeleteProductId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> _authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await _authenticationState;
        if(!state.User.Identity.IsAuthenticated){
            var currentURI = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={currentURI.LocalPath}", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }


    private void ShowDeleteConfirmation(int id)
    {
        DeleteProductId = id;
        _JSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task Delete(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
            var product = await _productRepository.GetById(DeleteProductId);
            if (product != null && product.ImageURL != "/images/defaults/defaultProduct.png"){
                _fileUploader.DeleteFile(product.ImageURL);
            }
            await _productRepository.Delete(DeleteProductId);
            DeleteProductId = 0;
            _JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
            Products = new List<ProductDTO>();
            await LoadProducts();
        }
        else
        {
            DeleteProductId = 0;
            _JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
