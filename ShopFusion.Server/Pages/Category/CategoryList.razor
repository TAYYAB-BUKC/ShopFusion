@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _JSRuntime

<div class="row mt-4">
    <div class="col-4">
        <h4 class="card-title text-primary">Category List</h4> 
    </div>
    <div class="col-5 offset-2">
        <a href="/category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>
    <div class="col-12">
        @if(Categories.Count() > 0)
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Categories)
                    {
                        <tr>
                            <td>
                                @item.Name
                            </td>
                            <td>
                                <NavLink class="btn btn-primary" href="@($"/category/edit/{item.Id}")">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(item.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            @if(IsLoading)
            {
                <div class="text-center">
                    <img src="images/loading.gif" />
                </div>
            }
            else
            {
                <div>
                    <p>No records found.</p>
                </div>
            }
        }
    </div>
</div>

<_DeleteConfirmation IsProcessingInProgress="IsLoading" DeleteCallback="Delete"></_DeleteConfirmation>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private bool IsLoading { get; set; }
    private int DeleteCategoryId { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     await Task.Run(LoadCategories);
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void ShowDeleteConfirmation(int id)
    {
        DeleteCategoryId = id;
        _JSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task Delete(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteCategoryId != 0)
        {
            await _categoryRepository.Delete(DeleteCategoryId);
            DeleteCategoryId = 0;
            _JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
            Categories = new List<CategoryDTO>();
            await LoadCategories();
        }
        else
        {
            DeleteCategoryId = 0;
            _JSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
