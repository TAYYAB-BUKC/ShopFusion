@page "/category/create"
@page "/category/edit/{id:int}"

@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager;
<div class="row my-2">
    <h4 class="card-title text-primary mb-3 ml-3">@Title Category</h4>

    <div class="col-6">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="@Category.Name"></InputText>
                    <ValidationMessage For="() => Category.Name" />
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title Category</button>
                    <NavLink href="/category" class="btn btn-secondary">Back to List</NavLink>
                </div>
            </EditForm>
        }
    </div>

</div>


@code {

    [Parameter]
    public int Id { get; set; }

    private CategoryDTO Category { get; set; } = new CategoryDTO();
    private string Title { get; set; } = "Create New";
    private bool IsLoading { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     if (Id > 0)
    //     {
    //         Title = "Edit";
    //         await Task.Run(LoadCategory);
    //         IsLoading = false;
    //     }
    //     else
    //     {
    //         IsLoading = false;
    //     }

    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id > 0)
            {
                Title = "Edit";
                await LoadCategory();
            }
            else
            {
                IsLoading = false;
            }
        }
    }

    private async Task LoadCategory()
    {
        IsLoading = true;
        StateHasChanged();
        Category = await _categoryRepository.GetById(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertCategory()
    {
        if (Id > 0)
        {
            await _categoryRepository.Update(Category);
        }
        else
        {
            await _categoryRepository.Create(Category);
        }
        _navigationManager.NavigateTo("category");
    }
}
