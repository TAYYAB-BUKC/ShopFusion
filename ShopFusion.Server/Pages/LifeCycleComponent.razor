@page "/lifecycle"

<h3>Life Cycle Component</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<br />
<p>Life Cycle events Sequence</p>
@foreach (var item in EventType)
{
    @item
    <hr />
}
<div>
    <_LifeCycleChildComponent Counter="@currentCount"></_LifeCycleChildComponent>
</div>

<br />
<p>Life Cycle events Sequence</p>
@foreach (var item in EventType)
{
    @item
    <hr />
}

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized() is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync() is called");
        await Task.Delay(0);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet() is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync() is called");
        await Task.Delay(0);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else{
            currentCount = 999;
        }
        EventType.Add("OnAfterRender() is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync() is called");
        await Task.Delay(0);
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender() is called");
        return true; //display the changes if returns false.
        return false; //does not display the changes if returns false.
    }
}
