@page "/checkout"

@inject ILocalStorageService _localStorageService
@inject IProductService _productService
@inject IOrderService _orderService
@inject IJSRuntime _JSRuntime
@inject IPaymentService _paymentService
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="text-center">
        <img src="/images/loading.gif" />
    </div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">
        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>

                @foreach (var orderItem in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">

                        <div class="col-3 col-md-2 ">
                            <img src="@orderItem.Product.ImageURL" width="100%">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @orderItem.ProductName </span><br />
                            <span class="pt-1">Size : @orderItem.Size</span><br />
                            <span class="pt-1">Count : @orderItem.Count</span><br />

                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                USD
                                <span style="border-bottom:1px solid #ff6a00">
                                    @((orderItem.Price * orderItem.Count).ToString("C"))
                                </span>
                            </h4>
                        </div>
                    </div>
                }

                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Grand Total : <span class="text-secondary">@Order.Order.GrandTotal.ToString("C")</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.Order" OnValidSubmit="PlaceOrder" method="post">
                    <DataAnnotationsValidator />
                    <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

                    <div class="form-group pt-2">
                        <label>Name</label>
                        <InputText @bind-Value="Order.Order.Name" class="form-control" />
                        <ValidationMessage For="() => Order.Order.Name" />
                    </div>
                    <div class="form-group pt-2">
                        <label>Phone</label>
                        <InputText @bind-Value="Order.Order.PhoneNumber" class="form-control" />
                        <ValidationMessage For="() => Order.Order.PhoneNumber" />
                    </div>
                    <div class="form-group pt-2">
                        <label>Email</label>
                        <InputText @bind-Value="Order.Order.Email" class="form-control" />
                        <ValidationMessage For="() => Order.Order.Email" />
                    </div>
                    <div class="form-group pt-2">
                        <label>Street Address</label>
                        <InputText @bind-Value="Order.Order.StreetAddress" class="form-control" />
                        <ValidationMessage For="() => Order.Order.StreetAddress" />
                    </div>
                    <div class="form-group pt-2">
                        <label>City</label>
                        <InputText @bind-Value="Order.Order.City" class="form-control" />
                        <ValidationMessage For="() => Order.Order.City" />

                    </div>
                    <div class="form-group pt-2">
                        <label>State</label>
                        <InputText @bind-Value="Order.Order.State" class="form-control" />
                        <ValidationMessage For="() => Order.Order.State" />

                    </div>
                    <div class="form-group pt-2">
                        <label>Postal Code</label>
                        <InputText @bind-Value="Order.Order.PostalCode" class="form-control" />
                        <ValidationMessage For="() => Order.Order.PostalCode" />
                    </div>


                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    public CustomOrderDTO Order { get; set; }
    public IEnumerable<ProductDTO> Products { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var cartItems = await _localStorageService.GetItemAsync<List<CartViewModel>>(CommonConfiguration.CartKey);
            Products = await _productService.GetAllProducts();
            var userDetails = await _localStorageService.GetItemAsync<UserDTO>(CommonConfiguration.UserDetails_Key);
            Order = new CustomOrderDTO() {
                        Order = new OrderDTO() {
                            UserId = userDetails?.Id,
                            Name = userDetails?.Name,
                            Email = userDetails?.Email,
                            PhoneNumber = userDetails?.PhoneNumber,
                            GrandTotal = 0,
                            Status = CommonConfiguration.Status_Pending
                        },
                        OrderDetails = new List<OrderDetailsDTO>()
                    };
            foreach (var cartItem in cartItems)
            {
                cartItem.Product = Products.FirstOrDefault(p => p.Id == cartItem.ProductId);
                cartItem.ProductPrice = cartItem.Product.ProductPrices.FirstOrDefault(p => p.Id == cartItem.ProductPriceId);
                Order.OrderDetails.Add(new OrderDetailsDTO()
                {
                        Product = cartItem.Product,
                        ProductId = cartItem.ProductId,
                        ProductName = cartItem.Product.Name,
                        Price = cartItem.ProductPrice.Price,
                        Size = cartItem.ProductPrice.Size,
                        Count = cartItem.Count,    
                });
                Order.Order.GrandTotal += (cartItem.ProductPrice.Price * cartItem.Count);
            }
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async void PlaceOrder()
    {
        IsProcessing = true;
        try
        { 
            StripePaymentDTO stripePaymentDTO = new StripePaymentDTO(){
                Order = Order
            };
            var paymentResponse = await _paymentService.ProcessPayment(stripePaymentDTO);
            stripePaymentDTO.Order.Order.SessionId = Convert.ToString(paymentResponse.Data);
            
            var result = await _orderService.CreateOrder(stripePaymentDTO);

            await _localStorageService.SetItemAsync(CommonConfiguration.OrderDetails_Key, result);

            await _JSRuntime.InvokeVoidAsync("RedirectUserToStripePayment", Convert.ToString(paymentResponse.Data));
        }
        catch(Exception ex)
        {
            IsProcessing = false;
            await _JSRuntime.ShowFailureToastrNotification(ex.Message);
        }
    }
}